%%
%% Generate src/phoenix_version.erl automatically
%%

CommitShortHash = string:strip(os:cmd("git show --format='%h' -s"), right, 10).
LastUpdate = string:strip(os:cmd("git show --format='%cD' -s"), right, 10).
CommitTitle = string:strip(os:cmd("git show --format='%s' -s"), right, 10).
CurrentBranch = string:strip(os:cmd("git rev-parse --abbrev-ref HEAD"), right, 10).
LocalChanges = string:strip(os:cmd("git status -s"), right, 10).

CleanedCommitTitle = re:replace(CommitTitle, "\"", "'", [global, {return, list}]).

{ok, Fd} = file:open("src/phoenix_version.erl", write),
io:format(Fd, "%% This file is autogenerated and any changes will\n", []).
io:format(Fd, "%% be lost upon next build.\n\n", []).
io:format(Fd, "-module(phoenix_version).\n\n-export([hash/0, last_update/0, title/0, branch/0, status/0]).\n\n", []).
io:format(Fd, "hash() -> <<\"~s\">>.\n\n", [CommitShortHash]).
io:format(Fd, "last_update() -> <<\"~s\">>.\n\n", [LastUpdate]).
io:format(Fd, "title() -> <<\"~s\">>.\n\n", [CleanedCommitTitle]).
io:format(Fd, "branch() -> <<\"~s\">>.\n\n", [CurrentBranch]).
io:format(Fd, "status() -> <<\"~s\">>.\n\n", [LocalChanges]).
file:close(Fd).


ErlOpts = case lists:keyfind(erl_opts, 1, CONFIG) of
              false -> [];
              {erl_opts, Val} -> Val
          end,

TestProfile = {test, [{deps, [proper, meck]},
                      {relx, [{dev_mode, false},
                              {include_src, false},
                              {include_erts, true}]}
                     ]},
case os:type() of
    {win32, _} ->
        Config2 = lists:keystore(erl_opts, 1, CONFIG,
                                 {erl_opts, [{d, system_is_win32} | ErlOpts]}),
        JiffyOverride = {override, jiffy, [
                                   {plugins, [pc]},
                                   % for win32
                                   {artifacts, ["priv/jiffy.dll"]},
                                   {provider_hooks, [
                                       {post,
                                           [
                                               {compile, {pc, compile}},
                                               {clean, {pc, clean}}
                                           ]
                                       }]
                                   }
                                ]},
       XXHashOverride = {override, xxhash, [
                                   {plugins, [pc]},
                                   % for win32
                                   {artifacts, ["priv/xxhash.dll"]},
                                   {provider_hooks, [
                                       {post,
                                           [
                                               {compile, {pc, compile}},
                                               {clean, {pc, clean}}
                                           ]
                                       }]
                                   },
                                   {post_hooks, [
                                     {"win32", compile, "copy priv\\xxhash_drv.dll priv\\xxhash.dll"}
                                   ]}
                                ]},
                Config3 = lists:keystore(overrides, 1, Config2, {overrides, [JiffyOverride, XXHashOverride]}),
                WinProdProfile = {prod, [{relx, [{dev_mode, false},
                                                     {include_src, false},
                                                     {include_erts, true}]}
                                                     ]},
                lists:keystore(profiles, 1, Config3, {profiles, [WinProdProfile, TestProfile]});
    {osx, _} ->
        Config2 = lists:keystore(erl_opts, 1, CONFIG,
                                 {erl_opts, [{d, system_is_osx} | ErlOpts]}),
        JiffyDbOverride = {overrides , [
              {override , eleveldb, [{ pre_hooks , [{ compile , "make" }]}]}
              ]},
        OsxProdProfile = {prod, [{relx, [{dev_mode, false},
                                         {include_src, false},
                                         {include_erts, true}]}
                                        ]},
        Config3 = lists:keystore(overrides, 1, Config2, {overrides, [JiffyDbOverride]}),
        lists:keystore(profiles, 1, Config3, {profiles, [OsxProdProfile, TestProfile]});
    _ ->
        Config2 = lists:keystore(erl_opts, 1, CONFIG,
                                 {erl_opts, [{d, system_is_unix} | ErlOpts]}),
        JiffyOverride = {override, jiffy, [
                           {plugins, [pc]},
                           % for linux|unix
                           {artifacts, ["priv/jiffy.so"]},
                           {provider_hooks, [
                               {post,
                                   [
                                       {compile, {pc, compile}},
                                       {clean, {pc, clean}}
                                   ]
                               }]
                           }
                        ]},
        Config3 = lists:keystore(overrides, 1, Config2, {overrides, [JiffyOverride]}),
        LinuxProdProfile = {prod, [{relx, [{dev_mode, false},
                                             {include_src, false},
                                             {include_erts, true}]}
                                             ]},
        lists:keystore(profiles, 1, Config3, {profiles, [LinuxProdProfile, TestProfile]})
end.
